slug: network-performance-monitoring
id: ljugkngbqdhs
type: track
title: Network Performance Monitoring
teaser: Use ktranslate to discover your network devices, gather data, and send that data to your New Relic account. Then use New Relic to observe your network devices with a dashboard, an alert, and a workload.
description: |-
  ## Overview

  You’re an operations engineer relying on a network of SNMP-enabled devices. Your team already uses New Relic’s features for monitoring software and infrastructure, but it’s time to monitor your network devices as well.

  In this track, you use Kentik’s ktranslate library to automatically discover your network devices, gather data, and send that data to New Relic to correlate network performance with infrastructure, applications, and digital experiences. Then you use New Relic to monitor the health of your network.

  ## Objectives

  - Poll SNMP data from network devices and send it to New Relic
  - Sample network flow data and send it to New Relic
  - Create a New Relic dashboard for monitoring your network devices
  - Create a New Relic workload to logically group your devices and set up anomaly detection
  - Use your new data to understand behaviors within your network

  ## Requirements

  - A free [New Relic account](https://newrelic.com/signup?utm_source=developer-site)
  - A full user with the [**Nerdpack modify** user privilege](https://developer.newrelic.com/build-apps/permission-manage-apps/#full-users-1)

  ## Important Note

  _This track utilizes an ephemeral virtual machine. As a result, finish the entire track in one sitting or you'll lose your progress when time expires._
icon: https://storage.googleapis.com/instruqt-frontend/img/tracks/default.png
tags: []
owner: newrelic
developers:
- aronquillo@newrelic.com
private: false
published: false
show_timer: true
challenges:
- slug: copy-snmp-config
  id: 4kx0fqmh3mdh
  type: challenge
  title: Configure your settings
  teaser: Copy the default ktranslate configuration file from a temporary container
  notes:
  - type: text
    contents: As an operations engineer, you rely on a network of devices, including switches and routers, that sometimes cause problems in your infrastructure layer. It's critically important to monitor the health and behaviors of these devices so you can react to issues and make adjustments as needed.
  - type: text
    contents: |-
      We've simulated a network of virtual devices in docker for you to engage with. You can view those devices at any time:

      ```
      docker ps
      ```
  - type: text
    contents: Kentik created ktranslate to help you find network devices, receive data, and send that data to some output. In this lab, you'll use ktranslate to instrument your network and send data to your New Relic account so that you can monitor your devices' health. Read [its documentation](https://github.com/kentik/ktranslate) to learn how it works.
  assignment: |-
    Before you can discover your network devices with ktranslate, you need to configure some settings.

    The ktranslate docker image contains a base configuration file, called [_snmp-base.yaml_](https://docs.newrelic.com/docs/network-performance-monitoring/setup-performance-monitoring/advanced-config/#snmp-base-yml-template). Copy this file to your local host from a temporary container:

    ```
    docker pull kentik/ktranslate:v2
    id=$(docker create kentik/ktranslate:v2)
    docker cp $id:/etc/ktranslate/snmp-base.yaml .
    docker rm -v $id
    ```

    Here, you created a container, copied the configuration file to your current directory, and deleted the container because you no longer need it. To check your work, list the files in your current directory:

    ```
    ls -al
    ```

    You now have an _snmp-base.yaml_ file. In future challenges, you bind this file to various ktranslate containers.

    However, notice the file's permissions:

    ```
    -rw-r--r--
    ```

    To allow other containers to write to this configuration file, update the "other" file permission scope:

    ```
    chmod 646 snmp-base.yaml
    ```

    With the new file permissions set to `-rw-r--rw-`, you're ready for ktranslate to discover your devices.
  tabs:
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: edit-snmp-config
  id: novqte71cal8
  type: challenge
  title: Discover your devices
  teaser: Discover your devices with ktranslate
  notes:
  - type: text
    contents: With _snmp-base.yaml_, you configure different aspects of ktranslate functionality. Read our [documentation](https://docs.newrelic.com/docs/network-performance-monitoring/setup-performance-monitoring/advanced-config/) to familiarize yourself with its options.
  assignment: |-
    ## Review your settings

    In the **Code** tab, look at the `discovery` section of _snmp-base.yaml_. There are a few important settings to consider when configuring ktranslate to automatically discover your devices:

    - **cidrs:** the range of IP addresses ktranslate uses to discover your devices

    Your devices are represented by docker containers attached to the docker network `testnet`. To see the CIDR associated with `testnet`, change to the **Terminal** tab and run the following command:

    ```
    docker network inspect testnet
    ```

    The output lists `10.10.0.0/24` as the configured subnet. This is conveniently the same subnet that's referred to in the default configuration.

    - **ports:** the ports that ktranslate uses to discover your devices

    The default port included in _snmp-base.yaml_ is 161. That's because the default port SNMP managers use to communicate with SNMP agents is 161.

    To see the exposed port for each of your devices, change to the **Terminal** tab and run the following command:

    ```
    docker ps
    ```

    Every container exposes port 161, as described by the `PORTS` column.

    - **default_communities:** a prioritized list of community strings to discover

    The default community string listed in _snmp-base.yaml_ is `public`. We've conveniently configured all your devices to use the `public` community string.

    > **Note:** Even though `testnet` is configured such that you don't need to make changes to _snmp-base.yaml_, devices in your real life network may not be so convenient. Change these and other `discovery` specifications accordingly.

    ## Discover your devices

    Leave the default settings and switch to the **Terminal** tab. Start a new ktranslate container to discover your devices:

    ```
    docker run -ti --rm --net=testnet \
      -v `pwd`/snmp-base.yaml:/snmp-base.yaml \
      kentik/ktranslate:v2 \
        -snmp /snmp-base.yaml \
        -snmp_discovery=true
    ```

    Here, you:

    1. Specify the `testnet` network

    When setting up your lab environment, we attached the network devices to the `testnet` network, so you need to refer to it when you try to discover those devices.

    2. Mount your local _snmp-base.yaml_ to the ktranslate container.

    You used the default _snmp-base.yaml_ configuration for discovery, but you might have different values in real-world scenarios and this is how you'd apply them. By mounting your local _snmp-base.yaml_, you also allow ktranslate to write to your local configuration so you can remove the container when it has done its job without losing data.

    3. Specify the configuration file to use

    4. Instruct ktranslate to discover devices

    The end of the output tells you how many devices ktranslate discovered:

    ```
    KTranslate Adding 14 new SNMP devices to the configuration. 0 replaced from 14.
    ```

    Open the **Code** tab to see fourteen new device configurations in the `devices` section of _snmp-base.yaml_.
  tabs:
  - title: Code
    type: code
    hostname: host
    path: /root/snmp-base.yaml
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: send-snmp
  id: g9q0srsokort
  type: challenge
  title: Send SNMP data to New Relic
  teaser: Use ktranslate to send SNMP data to your New Relic account
  notes:
  - type: text
    contents: You can use ktranslate to poll SNMP data from devices on your network and send that data to New Relic.
  - type: text
    contents: |-
      To do so, you need your [account ID](https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/account-id/) and a [license key](https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/#ingest-license-key).

      Click on the appropriate link to find or create and copy each value. You use them in the next challenges.
  assignment: |-
    ## Update the poll interval

    In the `global` section of _snmp-base.yaml_, update `poll_time_sec` to 30:

    ```
    global:
      poll_time_sec: 30
    ```

    This makes ktranslate poll SNMP data every thirty seconds instead of every five minutes, which is the default rate. Click the "save" icon in the file tab.

    ## Set environment variables

    A few commands in this lab require your New Relic license key, account ID, and region. So, to make things easier, set the following environment variables, replacing [<LICENSE-KEY>](https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/#ingest-license-key), [<ACCOUNT-ID>](https://docs.newrelic.com/docs/accounts/accounts-billing/account-structure/account-id/), and `<REGION>` with real values:

    ```
    export NR_LICENSE_KEY=<LICENSE-KEY>
    export NR_ACCOUNT_ID=<ACCOUNT-ID>
    export NR_REGION=<REGION>  # US or EU
    ```

    With these variables set, you're prepared to poll your SNMP devices and store that data in your New Relic account. Later, you'll use that data to monitor the health of your devices.

    ## Send SNMP data to New Relic

    Now that you've discovered the SNMP-enabled devices in your network, poll those devices and send their data to your New Relic account:

    ```
    docker run -d --name ksnmp --restart unless-stopped --net=testnet \
      -v `pwd`/snmp-base.yaml:/snmp-base.yaml \
      -e NEW_RELIC_API_KEY=$NR_LICENSE_KEY \
      kentik/ktranslate:v2 \
        -snmp /snmp-base.yaml \
        -compression=gzip \
        -sinks=new_relic \
        -nr_account_id=$NR_ACCOUNT_ID \
        -log_level=info \
        -metrics=jchf \
        -tee_logs=true \
        -max_flows_per_message=100 \
        -listen=0.0.0.0:8183 \
        -metalisten=0.0.0.0:8184 \
        -format=new_relic_metric \
        -nr_region=$NR_REGION
    ```

    When you create this container, you use some of the same flags you did to discover your devices. For example, you set the network (`--net=testnet`) and mount your local _snmp-base.yaml_, which now has your device metadata so that ktranslate knows how to find the devices. You also specify the format as `new_relic_metric` so the data goes to New Relic.

    View the log stream from your new container:

    ```
    docker logs -f ksnmp
    ```

    Every time ktranslate polls your devices, you'll see new logs:

    ```
    ...
    2021-09-07T18:21:57.877 ktranslate [Info] KTranslate>Cisco Catalyst-6 SNMP interface metric poll - found metrics for 59 interfaces.
    2021-09-07T18:21:57.895 ktranslate [Info] KTranslate>Cisco Catalyst-2 SNMP interface metric poll - found metrics for 59 interfaces.
    2021-09-07T18:21:57.905 ktranslate [Info] KTranslate>Cisco Catalyst-1 SNMP interface metric poll - found metrics for 59 interfaces.
    2021-09-07T18:21:58.042 ktranslate [Info] KTranslate>Cisco Catalyst-3 SNMP interface metric poll - found metrics for 59 interfaces.
    2021-09-07T18:21:58.229 ktranslate [Info] KTranslate>Cisco Catalyst-7 SNMP interface metric poll - found metrics for 59 interfaces.
    2021-09-07T18:21:58.249 ktranslate [Info] KTranslate>Cisco Catalyst-5 SNMP interface metric poll - found metrics for 59 interfaces.
    ...
    ```

    Now you're sending SNMP data to your New Relic account. Next, you'll spin up a new ktranslate container for capturing flow data.
  tabs:
  - title: Code
    type: code
    hostname: host
    path: /root/snmp-base.yaml
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: send-flow-data
  id: gmy4u2kj78mj
  type: challenge
  title: Send flow data to New Relic
  teaser: Use ktranslate to send flow data to your New Relic account
  notes:
  - type: text
    contents: Along with SNMP data, you can use ktranslate to listen for flow data from devices on your network and send it to New Relic.
  assignment: |-
    With `ksnmp`, you're polling SNMP data from your devices. Now, set up another ktranslate container to listen for network flow data:

    ```
    docker run -d --name knetflow --restart unless-stopped --net=host \
      -v `pwd`/snmp-base.yaml:/snmp-base.yaml \
      -e NEW_RELIC_API_KEY=$NR_LICENSE_KEY \
      kentik/ktranslate:v2 \
        -snmp /snmp-base.yaml \
        -nr_account_id=$NR_ACCOUNT_ID \
        -metrics=jchf \
        -log_level=debug \
        -tee_logs=true \
        -flow_only=true \
        -nf.source=netflow5 \
        -listen=0.0.0.0:8283 \
        -metalisten=0.0.0.0:8284 \
        -nr_region=$NR_REGION \
        nr1.flow
    ```

    There are a few unique options you set for capturing flow data, such as:

    - `-flow_only`: tells ktranslate to listen for flow data
    - `-nf.source=netflow5`: specifies the network flow type to listen for

    This command runs a container that listens for flow data on port 8283 (`-listen=0.0.0.0:8283`). Once it receives data, it forwards it to New Relic.
  tabs:
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 300
- slug: observe-network
  id: wyhqhrqfynkc
  type: challenge
  title: Observe your network
  teaser: Observe your network in New Relic
  notes:
  - type: text
    contents: While you wait, we're creating a new device in your network to generate flow data for your collector to listen to.
  - type: text
    contents: If you haven't signed into [New Relic](one.newrelic.com), do that now so you're ready to monitor your network in the following challenges.
  assignment: |-
    From the **Website** tab, open New Relic in an external window. At the bottom of the New Relic entity explorer, under **Network**, you'll see the following entities:

    - **flow devices:** devices that channel network flow data. With a flow device entity, you can see data such as: total endpoints, packets per second, and geographical data from a request's origin.
    - **switch:** a network switch. With a switch, you can see data such as: CPU utilization, memory utilization, and errors.
    - **router:** a network router. With a router, you can see data such as: CPU utilization, memory utilization, and errors.
    - **Kentik default:** a network device that ktranslate monitors without knowing its type. If you have a device like this in your network, you'll either have to query the data for it manually or [contribute a custom entity definition](https://www.google.com/url?q=https://github.com/newrelic/entity-definitions&sa=D&source=editors&ust=1631118417701000&usg=AOvVaw0Osgs3c69rbuVPbgqjvjcG).

    These entities represent the devices in your network. Click on one to see its data:

    ![Flow device entity](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/flow-device.png)
  tabs:
  - title: Website
    type: external
    url: https://one.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJoaWdoLWRlbnNpdHktdmlldy5ob21lIiwiZmF2b3JpdGVzIjp7InNlbGVjdGVkIjp0cnVlLCJ2aXNpYmxlIjp0cnVlfSwibGFzdFZpZXdlZCI6eyJzZWxlY3RlZCI6ZmFsc2UsInZpc2libGUiOnRydWV9fQ==
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: add-dashboard
  id: 0whdqoxk8nml
  type: challenge
  title: Add a dashboard
  teaser: Add a dashboard to monitor your network
  notes:
  - type: text
    contents: New Relic is a programmable platform with a catalog of apps and custom visualizations you can add to your account. You can even [create some yourself](https://developer.newrelic.com/build-apps/build-hello-world-app/)!
  - type: text
    contents: One package of useful tools is called **Quickstarts**, which contains a bunch of dashboards created by New Relic to help you hit the ground running with data visualizations. You'll add one of these to your account in this challenge to monitor your network devices.
  assignment: |-
    Instead of querying and creating visualizations for your network devices by hand, you're going to use a dashboard that we created for you.

    From the **Website** tab, open New Relic in an external window and go to **Apps**:

    ![Navigate to Apps](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-apps.png)

    In the **New Relic One catalog** click the **Quickstarts** library:

    ![Click the Quickstarts library](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/click-quickstarts.png)

    Next, click **Add this app**:

    ![Click the quickstarts library](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/add-this-app.png)

    > **Note:** You may need to ask an administrator for the **Nerdpack modify** user privilege to do this. For more information on basic user limitations, [read our documentation](https://developer.newrelic.com/build-apps/permission-manage-apps/#basic-users-1).

    Select your account and submit the change:

    ![Update account with quickstarts](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/update-account.png)

    Now that you added **Quickstarts** to your account, return to **Apps** to find it in **Your apps**:

    ![Your apps](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/your-apps.png)

    Click on **Quickstarts**, search for "Network - Routers and Switches", and click on the dashboard:

    ![Find network dashboard](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/network-dashboard.png)

    Import the dashboard:

    ![Import the dashboard](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/import-dashboard.png)

    Navigate to **Dashboards**. Open your dashboard to find some prebuilt charts already populated with your network device data:

    ![Network dashboard](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/dashboard.png)
  tabs:
  - title: Website
    type: external
    url: https://one.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJoaWdoLWRlbnNpdHktdmlldy5ob21lIiwiZmF2b3JpdGVzIjp7InNlbGVjdGVkIjp0cnVlLCJ2aXNpYmxlIjp0cnVlfSwibGFzdFZpZXdlZCI6eyJzZWxlY3RlZCI6ZmFsc2UsInZpc2libGUiOnRydWV9fQ==
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: add-alerts
  id: 3txc293jpxw7
  type: challenge
  title: Add alerts
  teaser: Add alert policies to notify you when your devices have issues
  notes:
  - type: text
    contents: A dashboard is a great way for you to collect data from all your network devices in one place. It lets you visualize and filter your device data in interesting ways. But when you need to be notified when something goes wrong, you configure alert policies.
  - type: text
    contents: You use alerts to be notified when your data starts to show problem signs. For your network devices, you'll create an alert policy to send you an email when the poll rate for interface metrics drops too low.
  assignment: |-
    ## Create an alert condition

    From the **Website** tab, open New Relic in an external window and click **Alerts & AI**:

    ![Navigate to alerts and AI](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-alerts.png)

    Under **ALERTS** in the left-hand menu, click **Policies**:

    ![Navigate to policies](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-policies.png)

    Click **Create a policy**:

    ![Create a policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/first-alert-policy.png)

    If you already have alerts in your account, create another:

    ![Create a policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/second-alert-policy.png)

    Name your policy "Network device policy", leave the incident preference as "By policy", and create it:

    ![Create policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/create-policy.png)

    Click **Create a condition**:

    ![Create condition](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/create-condition.png)

    Select the NRQL product:

    ![NRQL condition](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nrql-condition.png)

    Name the condition "Low interface metrics polling rate" and use the following query:

    ```
    SELECT latest(`kentik.ktranslate.chf.kkc.interface_metrics`) FROM Metric FACET device_name
    ```

    ![Add name and query](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/add-name-and-query.png)

    This queries the rate that your network devices are polled for interface metrics. Because you're trying to create an alert condition for when a device's polling rate drops too low, set the condition threshold to the following values:

    - **Threshold Type:** Static
    - **Open violation when the:** query returns a value
    - **Critical:** below 0.01 for at least 1 minute

    Then, add a signal loss condition in case your device stops sending data altogether:

    - **Signal is lost after:** 1 minute
    - **On signal loss:** Open a new "lost signal" violation

    Save the condition:

    ![Add thresholds](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/threshold.png)

    Now, you've created an alert condition for when the poll rate for interface metrics drops below 0.01 for one minute. To receive alerts when your data violates this condition, create a notification channel.

    ## Create an alert notification channel

    From the left-hand menu, select **Notification channels**:

    ![Navigate to notification channels](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-channels.png)

    Click **New notification channel**:

    ![New notification channel](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/new-channel.png)

    Select email for the type, enter your email in the text field, and create your channel:

    ![Email notification channel](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/email-channel.png)

    In the left-hand menu, navigate back to **Policies** and select your new policy:

    ![Select your policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/select-policy.png)

    Under **Notification channels**, click **Add notification channels**:

    ![Add your channel to your policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/add-channel.png)

    Find your email channel and update your policy.
  tabs:
  - title: Website
    type: external
    url: https://one.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJoaWdoLWRlbnNpdHktdmlldy5ob21lIiwiZmF2b3JpdGVzIjp7InNlbGVjdGVkIjp0cnVlLCJ2aXNpYmxlIjp0cnVlfSwibGFzdFZpZXdlZCI6eyJzZWxlY3RlZCI6ZmFsc2UsInZpc2libGUiOnRydWV9fQ==
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
- slug: alert-condition-violation
  id: qzhmhbltrwam
  type: challenge
  title: Respond to alerts from your network
  teaser: Observe alert condition violations and respond to incidents
  notes:
  - type: text
    contents: You've set up an alert in New Relic to notify you when the interface metric polling rate drops below 0.01 for over one minute.
  - type: text
    contents: You also included a signal loss threshold for when your devices stop responding altogether.
  - type: text
    contents: While you're waiting, we're simulating an issue in your network so that you can see how valuable these alerts are for helping you discover issues with your network devices. This simulation takes about six minutes.
  assignment: |-
    You should have received an email from New Relic that the alert condition you created in the last challenge was violated. That's because one of your network devices stopped responding for a period of time.

    In the email, you can see the device that failed and the condition query that was violated. You can even acknowledge the incident right from the email. But you can also see information about the incident from the web interface.

    From the **Website** tab, open New Relic in an external window and click **Alerts & AI**:

    ![Navigate to alerts and AI](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-alerts.png)

    Under **ALERTS** in the left-hand menu, click **Incidents**:

    ![Navigate to policies](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/nav-to-incidents.png)

    Select your incident to see more information:

    ![Select your policy](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/incident.png)

    > **Note:** If the incident has already closed, look for it under **All incidents**.

    Here, you can see that the signal from the Cisco 1941-1 router was lost for at least one minute, which violates the signal loss threshold you specified in the last challenge.

    Now that you know about that router failure, you can take the appropriate steps necessary to make sure it doesn't happen again.
  tabs:
  - title: Website
    type: external
    url: https://one.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJoaWdoLWRlbnNpdHktdmlldy5ob21lIiwiZmF2b3JpdGVzIjp7InNlbGVjdGVkIjp0cnVlLCJ2aXNpYmxlIjp0cnVlfSwibGFzdFZpZXdlZCI6eyJzZWxlY3RlZCI6ZmFsc2UsInZpc2libGUiOnRydWV9fQ==
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 900
- slug: add-workload
  id: q6cxpwyo7kvy
  type: challenge
  title: Add a workload
  teaser: Add a workload to group your device entities
  notes:
  - type: text
    contents: You've created a dashboard and an alert policy to monitor your data and be notified when that data looks wrong. In this last challenge, you learn of a new way to group your device entities in New Relic, called workloads.
  - type: text
    contents: You use New Relic workloads to group conceptually, geographically, or physically similar entities to provide better insights into how they're performing in relation to one another. Here, you create a workload for your network devices.
  assignment: |-
    From the **Website** tab, open New Relic in an external window and click **Create a workload**:

    ![New workload](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/new-workload.png)

    Name your workload, select all 15 entities that represent devices on your network, and click **Create a workload**:

    ![Create a workload](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/create-workload.png)

    In your workload, you'll find the switch, router, and flow device entities that represent your network:

    ![Workload view](https://raw.githubusercontent.com/newrelic-experimental/network-performance-monitoring-lab/main/assets/workload.png)

    The workloads view provides new insights, such as a workload status, health over time, and an errors inbox. All this shows you how your entities are connected and observe your network health in one convenient location.
  tabs:
  - title: Website
    type: external
    url: https://one.newrelic.com/launcher/nr1-core.explorer?pane=eyJuZXJkbGV0SWQiOiJoaWdoLWRlbnNpdHktdmlldy5ob21lIiwiZmF2b3JpdGVzIjp7InNlbGVjdGVkIjp0cnVlLCJ2aXNpYmxlIjp0cnVlfSwibGFzdFZpZXdlZCI6eyJzZWxlY3RlZCI6ZmFsc2UsInZpc2libGUiOnRydWV9fQ==
  - title: Terminal
    type: terminal
    hostname: host
  difficulty: basic
  timelimit: 600
checksum: "13459088077231343066"
